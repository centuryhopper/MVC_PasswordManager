@using PasswordManager.Models
@model AccountListViewModel

@if (Model.accountModels.Count == 0 && String.IsNullOrEmpty(Model.filterTerm))
{
    <p>You don't have any passwords yet. Please start adding some.</p>
}
else if (Model.accountModels.Count == 0)
{
    <p>Couldn't find any accounts with this filter query.</p>
}
else
{
    <div class="table-responsive">
        <table class="table mb-4">
            <thead>
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col">Title</th>
                    <th scope="col">Username</th>
                    <th scope="col">Password</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (account, idx) in Model.accountModels.Select((account, i) => (account, i)))
                {
                    <tr>
                        <th scope="row">@account.accountId</th>
                        <td>@account.title</td>
                        <td>@account.username</td>
                        <td class='text-wrap' style="wordBreak: 'break-all';">
                            <div class="position-relative">
                                <input id="@idx" value="@account.password" type="password" readonly />
                                <i id="@("open"+idx)" class="fa-solid fa-eye position-absolute top-50 end-0 translate-middle-y" style="display: none;" onclick="toggleVisible(@idx)"></i>
                                <i id="@("close"+idx)"class="fa-solid fa-eye-slash position-absolute top-50 end-0 translate-middle-y" onclick="toggleVisible(@idx)"></i>
                            </div>
                        </td>
                        <td>

                            @* WHY IS IT THAT WE CANNOT PASS ACCOUNTMODEL OBJECT BACK UP? *@
                            <a
                                href="@Url.Action("Delete", "Home", new { userId = account.userId, accountId = account.accountId })"
                                class="btn btn-danger"
                                onclick="return confirm('Are you sure you want to delete this password account?')"
                            >
                                Delete <i class="fa fa-trash"></i>
                            </a>

                            <a
                                href="@Url.Action("Edit", "Home", new { idx = idx, accountId = account.accountId })"
                                class="btn btn-success"
                            >
                                    Edit
                                <i class="fa-solid fa-pen-to-square"></i>
                            </a>

                            @* <button
                                type="button"
                                class="btn btn-success"
                                data-toggle="modal"
                                data-target="@("#EditProduct-"+account.accountId)"
                                data-url="@Url.Action("Edit", "Home", new {accountId=account.accountId, idx=idx})"
                            >
                                    Edit
                                <i class="fa-solid fa-pen-to-square"></i>
                            </button> *@

                            <input id="@("accountId"+idx)" type="hidden" value="@account.accountId">
                            <input id="@("idx"+idx)" type="hidden" value="@idx">

                            @* <div id="editView"></div> *@

                            @* @await Html.PartialAsync("_Edit", new EditViewModel {accountModel = account, editIdx = idx}) *@

                            @* @await Component.InvokeAsync("EditDetails", new {accountId=account.accountId, idx=idx}) *@
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


<script>
    // partial views are ajax generated so window.onload will not work
         $(document).ready(function() {
        // Your JavaScript code here
        console.log('logging account list view');
    });

    var openEditMenu = async (idx) => {

        var url = '@Url.Action("Edit", "Home")' + '?accountId=' + encodeURIComponent(document.getElementById('accountId'+idx).value) + '&idx=' + encodeURIComponent(document.getElementById('idx'+idx).value);

        try {
            var response = await fetch(url, {
                method: 'GET'
            });
            var data = await response.text();
            document.getElementById('editView').innerHTML = '';
            document.getElementById('editView').insertAdjacentHTML('beforeend', data);

            if (callback) {
                callback();
            }
        } catch (error) {
            console.error(error);
        }

        console.log('opening edit menu');

    }



    var editClick = () =>
    {
        console.log('clicked edit');
    }
</script>