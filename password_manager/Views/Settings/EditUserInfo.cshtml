@model ProfileViewModel
@inject UserManager<ApplicationUser> userManager
@inject RoleManager<IdentityRole> roleManager
@inject IHttpContextAccessor ctx

@{
    var autoSaveSeconds = 5;
    var getRoles = from role in roleManager.Roles where role.Name != Constants.ADMIN select role;
    var user = await userManager.FindByIdAsync(ctx.HttpContext!.Session.GetString(Constants.userId)!);
    var currentRole = (await userManager.GetRolesAsync(user!)).FirstOrDefault();
}

<div class="text-center">
    <form id="edituserInfoForm" action="@Url.Action("Edit", "Home")" method="post">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label for="EditUserInfo1" class="form-label">Username</label>
            <input asp-for="UserName" id="EditUserInfo1" class="form-control" placeholder="please enter a new username" type="text" value="@user?.UserName">
            <span asp-validation-for="UserName" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label for="EditUserInfo2" class="form-label">Email</label>
            <input asp-for="Email" id="EditUserInfo1" class="form-control" placeholder="please enter a new email" type="text" value="@user?.Email">
            <span asp-validation-for="Email" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label for="EditUserInfo3" class="form-label">First Name</label>
            <input asp-for="FirstName" id="EditUserInfo1" class="form-control" placeholder="please enter a new first name" type="text" value="@user?.FirstName">
            <span asp-validation-for="FirstName" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label for="EditUserInfo1" class="form-label">Last Name</label>
            <input asp-for="LastName" id="EditUserInfo1" class="form-control" placeholder="please enter a new last name" type="text" value="@user?.LastName">
            <span asp-validation-for="LastName" class="text-danger"></span>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Role, "Select a role:")
            <select id="myDropdown" class="form-control" asp-for="Role" asp-items="@(new SelectList(getRoles, currentRole))">
                <option value="">Please select a role</option>
            </select>
            <span asp-validation-for="Role" class="text-danger"></span>
        </div>
    </form>
    @if (TempData[Constants.EDIT_USER] is not null)
    {
        <div class="alert alert-success">@TempData[Constants.EDIT_USER]</div>
    }
    @if (TempData[Constants.ERROR_EDIT_USER] is not null)
    {
        <div class="alert alert-danger">@TempData[Constants.ERROR_EDIT_USER]</div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(() => {
            // Get the dropdown element by its ID
            var myDropdown = document.getElementById("myDropdown");

             // Find the first option element that matches a certain condition
            var defaultOption = Array.from(myDropdown.options).find(option => option.value === '@currentRole');

            // Set the selected attribute of the default option to true
            defaultOption.selected = true;

            setInterval(() =>
            {
                autosave();
            }, @autoSaveSeconds * 1000);
        })
    </script>
}